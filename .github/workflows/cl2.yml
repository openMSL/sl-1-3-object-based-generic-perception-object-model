name: Credibility Assessment Level 2

on:
  workflow_call:

jobs:
  build_tracefile_player:
    name: Build Tracefile Player FMU
    uses: ./.github/workflows/build_tracefile_player.yml

  build_tracefile_writer:
    name: Build Tracefile Writer FMU
    uses: ./.github/workflows/build_tracefile_writer.yml

  build_esmini:
    name: Build esmini FMU
    uses: ./.github/workflows/build_esmini.yml

  build_osi-validation:
    name: Build osi-validation
    uses: ./.github/workflows/build_osi-validation.yml

  build_openmcx:
    name: Build OpenMCx
    uses: ./.github/workflows/build_openmcx.yml

  generate_integration_test_paths:
    runs-on: ubuntu-latest
    name: Generate Integration Test Paths

    steps:
      - uses: actions/checkout@v4
      - name: Generate matrix with all integration tests
        id: set-matrix
        working-directory: test/integration
        run: |
          echo "matrix=$(ls -l | grep '^d' | awk -F ' ' '{print $9}' | grep -Po '\d{3}.*' | jq -R -s -c 'split("\n") | map(select(length > 0))')" >> $GITHUB_OUTPUT
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  run_integration_test:
    needs: [build_tracefile_player, build_tracefile_writer, build_osi-validation, build_openmcx, build_esmini, generate_integration_test_paths]
    name: Integration Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        path: ${{ fromJson(needs.generate_integration_test_paths.outputs.matrix) }}

    steps:
      - name: Print matrix path
        run: echo ${{ github.workspace }}/${{ matrix.path }}

      - name: Checkout Model
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Cache Protobuf
        id: cache-protobuf
        uses: actions/cache@v4
        with:
          path: protobuf-21.12
          key: ${{ runner.os }}-protobuf

      - name: Cache Model FMU
        id: cache-model-fmu
        uses: actions/cache@v4
        with:
          path: /tmp/model_fmu
          key: ${{ runner.os }}-model-fmu-${{ github.sha }}

      - name: Cache Tracefile Player FMU
        id: cache-tracefile-player-fmu
        uses: actions/cache@v4
        with:
          path: /tmp/tracefile_player_fmu
          key: ${{ runner.os }}-tracefile-player-fmu

      - name: Cache Tracefile Writer FMU
        id: cache-tracefile-writer-fmu
        uses: actions/cache@v4
        with:
          path: /tmp/tracefile_writer_fmu
          key: ${{ runner.os }}-tracefile-writer-fmu

      - name: Cache esmini FMU
        id: cache-esmini-fmu
        uses: actions/cache@v4
        with:
          path: /tmp/esmini_fmu
          key: ${{ runner.os }}-esmini-fmu

      - name: Cache osi-validation
        id: cache-osi-validation
        uses: actions/cache@v4
        with:
          path: /tmp/osi-validation
          key: ${{ runner.os }}-osi-validation

      - name: Cache OpenMCx
        id: cache-openmcx
        uses: actions/cache@v4
        with:
          path: openmcx
          key: ${{ runner.os }}-openmcx

      - name: Install dependencies
        run: sudo apt install -y libxml2-dev zlib1g-dev libzip-dev

      - name: Check For Input Trace Files
        id: check-for-input-trace-files
        working-directory: ./test/integration/${{ matrix.path }}
        run: |
          ( count=`ls -1 *.osi 2>/dev/null | wc -l`
          if [ $count == 0 ]; then
          echo No trace file found.
          echo "found_trace=0" >> $GITHUB_OUTPUT
          elif [ $count == 1 ]; then
          echo One trace file found.
          echo "found_trace=1" >> $GITHUB_OUTPUT
          filename=$(ls -1 *.osi)
          else
          echo More than one trace file.
          echo "found_trace=1" >> $GITHUB_OUTPUT
          fi
          )

      - name: Check Input Trace Files with osi-validation and model input rules
        if: steps.check-for-input-trace-files.outputs.found_trace == 1
        run: |
          if [ -d "./rules/input_rules" ]; then
            source /tmp/osi-validation/.venv/bin/activate
            for filename in ./test/integration/${{ matrix.path }}/*.osi; do
              osivalidator --rules ./rules/input_rules --data ${filename}
            done
          else echo "No custom input rules found in ./rules/input_rules";
          fi

      - name: Create Output Folder
        working-directory: ./test/integration/${{ matrix.path }}
        run: mkdir output

      - name: Run OpenMCx
        id: cosimulation
        run: ./openmcx/install/openmcx ./test/integration/${{ matrix.path }}/SystemStructure.ssd

      - name: Check For Output Trace Files
        id: check-for-output-trace-files
        working-directory: ./test/integration/${{ matrix.path }}/output
        run: |
          ( count=`ls -1 *.osi 2>/dev/null | wc -l`
          if [ $count == 0 ]; then
          echo No trace file found.
          echo "found_trace=0" >> $GITHUB_OUTPUT
          elif [ $count == 1 ]; then
          echo One trace file found.
          echo "found_trace=1" >> $GITHUB_OUTPUT
          filename=$(ls -1 *.osi)
          echo "trace_file_name=${filename}" >> $GITHUB_OUTPUT
          else
          echo More than one trace file.
          echo "found_trace=1" >> $GITHUB_OUTPUT
          zip ${{ matrix.path }}.zip *.osi
          echo "trace_file_name=${{ matrix.path }}.zip" >> $GITHUB_OUTPUT
          fi
          )

      - name: Archive Output Trace Files
        if: steps.check-for-output-trace-files.outputs.found_trace == 1
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.check-for-output-trace-files.outputs.trace_file_name }}
          path: ./test/integration/${{ matrix.path }}/output/${{ steps.check-for-output-trace-files.outputs.trace_file_name }}

      - name: Check Output Trace Files with osi-validation and default rules
        if: steps.check-for-output-trace-files.outputs.found_trace == 1
        working-directory: ./test/integration/${{ matrix.path }}/output
        run: |
          source /tmp/osi-validation/.venv/bin/activate
          for filename in ./*.osi; do
            osivalidator --rules /tmp/osi-validation/rules/ --data ${filename}
          done

      - name: Check Output Trace Files with osi-validation and model output rules
        if: steps.check-for-output-trace-files.outputs.found_trace == 1
        run: |
          if [ -d "./rules/output_rules" ]; then
            source /tmp/osi-validation/.venv/bin/activate
            for filename in ./test/integration/${{ matrix.path }}/output/*.osi; do
              osivalidator --rules ./rules/output_rules --data ${filename}
            done
          else echo "No custom output rules found in ./rules/output_rules";
          fi

      - name: Check For Python Scripts
        id: check-for-python-scripts
        working-directory: ./test/integration/${{ matrix.path }}
        run: |
          ( count=`ls -1 *.py 2>/dev/null | wc -l`
          if [ $count == 0 ]; then
          echo No python script found.
          echo "found_script=0" >> $GITHUB_OUTPUT
          elif [ $count == 1 ]; then
          echo "found_script=1" >> $GITHUB_OUTPUT
          filename=$(ls -1 *.py)
          echo "python_file_name=${filename}" >> $GITHUB_OUTPUT
          else
          echo More than one trace file.
          echo "found_script=0" >> $GITHUB_OUTPUT
          fi
          )

      - name: Install ProtoBuf
        working-directory: protobuf-21.12
        run: sudo make install && sudo ldconfig
        
      - name: Install Analysis Dependencies
        if: steps.check-for-python-scripts.outputs.found_script == 1
        working-directory: ./lib/open-simulation-interface
        run: |
          python3 -m pip install protobuf==4.21.12
          python3 -m pip install .
          
      - name: Run Trace File Analysis
        if: steps.check-for-python-scripts.outputs.found_script == 1
        working-directory: ./test/integration/${{ matrix.path }}
        run: python3 ${{ steps.check-for-python-scripts.outputs.python_file_name }} output/${{ steps.check-for-output-trace-files.outputs.trace_file_name }}

      - name: Failed?
        if: steps.cosimulation.outputs.failed == 1
        run: exit 1
